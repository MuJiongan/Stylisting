{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stylisting making lists more elegant, interactive, and easier to make Getting Started In the head section of your HTML, add the below code snippet <link rel=\"stylesheet\" href=\"stylisting.css\"> <script defer type=\"text/javascript\" src='stylisting.js'></script> <script defer type=\"text/javascript\" src='examples.js'></script> In the body section of your HTML, add the below code snippet to where you want your list to locate at You can also specify the width of your list <div id='ul2' style='width: 300px'></div> In the examples.js file, include the following code snippet // define the items of your list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] // UnorderedList2 class take three arguments(there are more optional arguments) // items, DivID, whether or not the list should be editable by user const unorderedList2 = new UnorderedList2([...items], 'ul2', true) // the below method will generate the list in the div with the div id \"ul2\" unorderedList2.generateStylisting() Your list will look like this: Supported List Types There are several list types that are defined as classes in the JavaScript Files. Each list type except Tab has three styles to choose from. For example, If you want to choose UnorderedList, use class UnorderedList1 , UnorderedList2 or UnorderedList3 instead of UnorderedList by itself (because UnorderedList has no styles applied). Same goes for OrderedList , TodoList , and ToggleList . For tab, simply use class Tab since there is only one style for tab. UnorderedList UnorderedList1 UnorderedList2 UnorderedList3 OrderedList OrderedList1 OrderedList2 OrderedList3 TodoList TodoList1 TodoList2 TodoList3 ToggleList ToggleList1 ToggleList2 ToggleList3 Tab For all the UnorderedLists, OrderedLists, and TodoLists, their constructors take the same arguments: For example, const td3 = new ToDoList3(items, parentDivID, editable, fontFamily, fontColor, backgroundColorList) items : all the items in the list parentDivID : the div id where you want your list to locate at editable : whether or not the list can be edited by the user (optional, default false ) When true , users can Add items Delete items Edit items Sort items Change views and the items changed will be updated in the object fontFamily : font family of the list (optional) fontColor : font color of the list (optional) backgroundColorList : background colors of the list. If there is more than one color in the list, the background color will change for each item (optional) More details in the sections below UnorderedList, OrderedList, TodoList UnorderedList UnorderedList1 , UnorderedList2 , UnorderedList3 work the same way. The only difference is their style. Let\u2019s use UnorderedList3 for example: HTML: <div id='ul3' style='width: 300px'></div> JavaScript: if you want user to interact with the list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const unorderedList3 = new UnorderedList3(items, parentDivID, true) unorderedList3.generateStylisting() if you don\u2019t want user to interact with the list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const unorderedList3 = new UnorderedList3(items, parentDivID, false) unorderedList3.generateStylisting() If you want to customize the style, like specifing your own background Color, font family, etc const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const fontFamily = \"Impact,Charcoal,sans-serif\" const fontColor = 'blue' const backgroundColorList = ['white', 'gray'] const unorderedList3 = new UnorderedList3(items, parentDivID, false, fontFamily, fontColor, backgroundColorList) unorderedList3.generateStylisting() This also works the same way for all OrderedList( OrderedList1 , OrderedList2 , OrderedList3 ) and TodoList( TodoList1 , TodoList2 , TodoList3 ). I am not going to show the examples below OrderedList OrderedList1 , OrderedList2 , OrderedList3 work the same way. The only difference is their style. Let\u2019s use OrderedList3 for example: HTML: <div id='ol3' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ol3' const orderedList3 = new OrderedList3(items, parentDivID, true) orderedList3.generateStylisting() TodoList TodoList allows user to click on the checkbox to indicate a task is finished or not TodoList1 , TodoList2 , TodoList3 work the same way. The only difference is their style. Let\u2019s use TodoList2 for example: HTML: <div id='td2' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'td2' const td2 = new TodoList2(items, parentDivID, true) td2.generateStylisting() ToggleList ToggleList allows user to toggle the list items TodoList1 , TodoList2 , TodoList3 work the same way. The only difference is their style. Let\u2019s use TodoList3 for example: HTML: <div id='tg3' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const title = \"Title\" const parentDivID = 'tg3' const tg3 = new ToggleList3(items, title, parentDivID, true) tg3.generateStylisting() If you would like to customize the style: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const fontFamily = \"Impact,Charcoal,sans-serif\" // optional const fontColor = 'blue' // optional const backgroundColorList = ['white', 'gray'] // optional const toggleColor = 'green' // optional const tg3 = new UnorderedList3(items, parentDivID, false, fontFamily, fontColor, backgroundColorList, toggleColor) tg3.generateStylisting() Tab Tab works like your typical browser tab. HTML: <div id='tab' style='width: 600px'></div> const items = ['Item 1', 'Item 2', '<h3>Item 3</h3>Hi', 'Item 4', 'Item 5'] const titles = ['title1', 'title2', 'title3', 'title4', 'title5'] const parentDivID = 'tab' const tab = new Tab(items, titles, parentDivID) tab.generateStylisting() if you want to customize the style: const items = ['Item 1', 'Item 2', '<h3>Item 3</h3>Hi', 'Item 4', 'Item 5'] const titles = ['title1', 'title2', 'title3', 'title4', 'title5'] const parentDivID = 'tab' const fontFamily = \"Impact,Charcoal,sans-serif\" const fontColor = 'green' const tabItemBackgroundColor = 'gray' const tabTitleBackgroundColor = 'yellow' const titleColor = 'purple' const tab = new Tab(items, titles, parentDivID, fontFamily, fontColor, tabItemBackgroundColor, tabTitleBackgroundColor, titleColor)","title":"Stylisting"},{"location":"#stylisting","text":"making lists more elegant, interactive, and easier to make","title":"Stylisting"},{"location":"#getting-started","text":"In the head section of your HTML, add the below code snippet <link rel=\"stylesheet\" href=\"stylisting.css\"> <script defer type=\"text/javascript\" src='stylisting.js'></script> <script defer type=\"text/javascript\" src='examples.js'></script> In the body section of your HTML, add the below code snippet to where you want your list to locate at You can also specify the width of your list <div id='ul2' style='width: 300px'></div> In the examples.js file, include the following code snippet // define the items of your list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] // UnorderedList2 class take three arguments(there are more optional arguments) // items, DivID, whether or not the list should be editable by user const unorderedList2 = new UnorderedList2([...items], 'ul2', true) // the below method will generate the list in the div with the div id \"ul2\" unorderedList2.generateStylisting() Your list will look like this:","title":"Getting Started"},{"location":"#supported-list-types","text":"There are several list types that are defined as classes in the JavaScript Files. Each list type except Tab has three styles to choose from. For example, If you want to choose UnorderedList, use class UnorderedList1 , UnorderedList2 or UnorderedList3 instead of UnorderedList by itself (because UnorderedList has no styles applied). Same goes for OrderedList , TodoList , and ToggleList . For tab, simply use class Tab since there is only one style for tab. UnorderedList UnorderedList1 UnorderedList2 UnorderedList3 OrderedList OrderedList1 OrderedList2 OrderedList3 TodoList TodoList1 TodoList2 TodoList3 ToggleList ToggleList1 ToggleList2 ToggleList3 Tab For all the UnorderedLists, OrderedLists, and TodoLists, their constructors take the same arguments: For example, const td3 = new ToDoList3(items, parentDivID, editable, fontFamily, fontColor, backgroundColorList) items : all the items in the list parentDivID : the div id where you want your list to locate at editable : whether or not the list can be edited by the user (optional, default false ) When true , users can Add items Delete items Edit items Sort items Change views and the items changed will be updated in the object fontFamily : font family of the list (optional) fontColor : font color of the list (optional) backgroundColorList : background colors of the list. If there is more than one color in the list, the background color will change for each item (optional) More details in the sections below","title":"Supported List Types"},{"location":"#unorderedlist-orderedlist-todolist","text":"","title":"UnorderedList, OrderedList, TodoList"},{"location":"#unorderedlist","text":"UnorderedList1 , UnorderedList2 , UnorderedList3 work the same way. The only difference is their style. Let\u2019s use UnorderedList3 for example: HTML: <div id='ul3' style='width: 300px'></div> JavaScript: if you want user to interact with the list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const unorderedList3 = new UnorderedList3(items, parentDivID, true) unorderedList3.generateStylisting() if you don\u2019t want user to interact with the list const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const unorderedList3 = new UnorderedList3(items, parentDivID, false) unorderedList3.generateStylisting() If you want to customize the style, like specifing your own background Color, font family, etc const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const fontFamily = \"Impact,Charcoal,sans-serif\" const fontColor = 'blue' const backgroundColorList = ['white', 'gray'] const unorderedList3 = new UnorderedList3(items, parentDivID, false, fontFamily, fontColor, backgroundColorList) unorderedList3.generateStylisting() This also works the same way for all OrderedList( OrderedList1 , OrderedList2 , OrderedList3 ) and TodoList( TodoList1 , TodoList2 , TodoList3 ). I am not going to show the examples below","title":"UnorderedList"},{"location":"#orderedlist","text":"OrderedList1 , OrderedList2 , OrderedList3 work the same way. The only difference is their style. Let\u2019s use OrderedList3 for example: HTML: <div id='ol3' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ol3' const orderedList3 = new OrderedList3(items, parentDivID, true) orderedList3.generateStylisting()","title":"OrderedList"},{"location":"#todolist","text":"TodoList allows user to click on the checkbox to indicate a task is finished or not TodoList1 , TodoList2 , TodoList3 work the same way. The only difference is their style. Let\u2019s use TodoList2 for example: HTML: <div id='td2' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'td2' const td2 = new TodoList2(items, parentDivID, true) td2.generateStylisting()","title":"TodoList"},{"location":"#togglelist","text":"ToggleList allows user to toggle the list items TodoList1 , TodoList2 , TodoList3 work the same way. The only difference is their style. Let\u2019s use TodoList3 for example: HTML: <div id='tg3' style='width: 300px'></div> JavaScript: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const title = \"Title\" const parentDivID = 'tg3' const tg3 = new ToggleList3(items, title, parentDivID, true) tg3.generateStylisting() If you would like to customize the style: const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'] const parentDivID = 'ul3' const fontFamily = \"Impact,Charcoal,sans-serif\" // optional const fontColor = 'blue' // optional const backgroundColorList = ['white', 'gray'] // optional const toggleColor = 'green' // optional const tg3 = new UnorderedList3(items, parentDivID, false, fontFamily, fontColor, backgroundColorList, toggleColor) tg3.generateStylisting()","title":"ToggleList"},{"location":"#tab","text":"Tab works like your typical browser tab. HTML: <div id='tab' style='width: 600px'></div> const items = ['Item 1', 'Item 2', '<h3>Item 3</h3>Hi', 'Item 4', 'Item 5'] const titles = ['title1', 'title2', 'title3', 'title4', 'title5'] const parentDivID = 'tab' const tab = new Tab(items, titles, parentDivID) tab.generateStylisting() if you want to customize the style: const items = ['Item 1', 'Item 2', '<h3>Item 3</h3>Hi', 'Item 4', 'Item 5'] const titles = ['title1', 'title2', 'title3', 'title4', 'title5'] const parentDivID = 'tab' const fontFamily = \"Impact,Charcoal,sans-serif\" const fontColor = 'green' const tabItemBackgroundColor = 'gray' const tabTitleBackgroundColor = 'yellow' const titleColor = 'purple' const tab = new Tab(items, titles, parentDivID, fontFamily, fontColor, tabItemBackgroundColor, tabTitleBackgroundColor, titleColor)","title":"Tab"}]}